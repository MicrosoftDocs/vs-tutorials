### YamlMime:YamlDocument
documentType: Tutorial
title: Hello C#
metadata:
  title:  Hello C#. Your first introduction to the C# language.
  description: In this tutorial, you'll use your browser to learn C# interactively. You write C# code and see the results of compiling and running your code directly in the browser.
  audience: Developer
  level: Beginner
  nextTutorialHref: numbers-in-csharp
  nextTutorialTitle: Numbers in C#
  displayType: two-column
  interactive: csharp
items:
- durationInMinutes: 1
  content: |
    This tutorial teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code. It contains a series of lessons that begin with a "Hello World" program. These lessons teach you the fundamentals of the C# language.
- title: Run your first C# program
  durationInMinutes: 2
  content: |
    Run the following code in the interactive window. To do that, type the following code block in the interactive window and click the **Run** button:
    ```csharp
    Console.WriteLine("Hello World!");
    ```
    Congratulations! You've run your first C# program. It's a simple program that prints the message "Hello World!". It used the System.Console.WriteLine method to print that message. `Console` is a type that represents the console window. `WriteLine` is a method of the `Console` type that prints a line of text to that text console.
    Let's move on and explore more. The rest of this lesson explores working with the `string` type, which represents text in C#. Like the `Console` type, the `string` type has methods. The `string` methods work with text. 
    > [!NOTE]
    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
- title: Declare and use variables
  durationInMinutes: 3
  content: |
    Your first program printed the `string` "Hello World!" on
    the screen. 
    
    > [!TIP]
    > As you explore C# (or any programming language), you'll
    > make mistakes when you write code. The **compiler** will
    > find those errors and report them to you. When the output
    > contains error messages, look closely at the example code,
    > and the code in the interactive window to see what to fix.
    > That exercise will help you learn the structure of C# code. 
    Your first program is limited to printing one message. You can write more
    useful programs by using **variables**. A **variable** is a symbol you can
    use to run the same code with different values. Let's try it! Replace the
    code you've written in the interactive window with the following code:
    ```csharp
    string aFriend = "Bill";
    Console.WriteLine(aFriend);
    ```
    The first line declares a variable, `aFriend` and assigns it a value, "Bill". The second line
    prints out the name.
    You can assign different values to any variable you declare. You can change
    the name to one of your friends. Add these two lines in the interactive window
    following the code you've already added:
    ```csharp
    aFriend = "Maria";
    Console.WriteLine(aFriend);
    ```
    Notice that the same line of code prints two different messages, based on
    the value stored in the `aFriend` variable.
    You may have also noticed that the word "Hello" was missing in the last two messages. Let's fix
    that now.  Modify the lines that print the message to the following:
    ```csharp
    Console.WriteLine("Hello " + aFriend);
    ```
    Click **Run** again to see the results.
    As we progress, creating strings to print using `+` becomes cumbersome. String interpolation lets you piece together strings in a more concise and readable way.
    If you add a `$` before the opening quotes of the string, you can then include string expressions, like the `aFriend` variable, inside the string in curly brackets.
    ```csharp
    Console.WriteLine($"Hello {aFriend}");
    ```
    Click **Run** again to see the results.
    > [!NOTE]
    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
- title: Work with strings
  durationInMinutes: 5
  content: |
    Your last edit was our first look at what you can do with strings. Let's explore more.
    The `+` is called an operator in C#. When applied to strings like `firstString + secondString`, a new string is created with the text from the first followed by the text from the second. This is referred to as *string concatenation*. You can combine any number of strings, including string variables.  Try this:
    ```csharp
    string firstFriend = "Maria";
    string secondFriend = "Sage";
    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");
    ```
    As you explore more with strings, you can find the length of a string using `Length`. `Length` is a **property** of a string and it returns the number of characters in that string. Add the following code at the bottom of the interactive window:
    ```csharp
    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");
    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");
    ```
    > [!TIP]
    > This is a good time to explore on your own. You've learned that `Console.WriteLine()`
    > writes text to the screen. You've learned how to declare variables and
    > concatenate strings together. Experiment in the interactive window. Write
    > some more messages yourself. Build strings using the `+` operator.
    > [!NOTE]
    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
- title: Do more with strings
  durationInMinutes: 5
  content: |
    You've been using a **method**, to print messages. A **method** is a block of code that implements some action. It has a name, so you can access it. 
    
    The `string` type has many useful methods. Let's explore this method. These methods remove leading and trailing spaces:
    ```csharp
    string message = "      Hello World!       ";
    Console.WriteLine($"[{message}]");
    string trimmedMessage = message.TrimStart();
    Console.WriteLine($"[{trimmedMessage}]");
    trimmedMessage = message.TrimEnd();
    Console.WriteLine($"[{trimmedMessage}]");
    trimmedMessage = message.Trim();
    Console.WriteLine("[{trimmedMessage}]");
    ```
    This sample reinforces a couple of important concepts for working with strings. The methods that manipulate strings return new string objects rather than making modifications in place. You can see that each call to any of the `Trim` methods returns a new string, but does not change the original message.
    There are other methods available to work with a string. For example, you've probably used a search and replace command in an editor or word processor. The method does something similar in a `string`. It searches for a substring, and replaces it with different text. The method takes two **parameters**. These are the strings between the parentheses. The first string is the text to search for. The second string is the text to replace it with. Try it for yourself. Add this code:
    ```csharp
    string message = "Hello World!";
    Console.WriteLine(message);
    message = message.Replace("Hello", "Greetings");
    Console.WriteLine(message);
    ```
    Two other useful methods make a string ALL CAPS or all lower case. Try the following code:
    ```csharp
    string message = "Hello World!";
    Console.WriteLine(message);
    Console.WriteLine(message.ToUpper());
    Console.WriteLine(message.ToLower());
    ```
    > [!NOTE]
    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
- title: Search strings
  durationInMinutes: 10
  content: |
    The other part of a *search and replace* operation is to find text in a
    string. You can use the 'System.String.Contains method for searching. It
    tells you if a string contains a substring inside it. Try the following
    code to explore 'System.String.Contains
    ```csharp
    string message = "You say goodbye, and I say hello";
    Console.WriteLine(message.Contains("goodbye"));
    Console.WriteLine(message.Contains("greetings"));
    ```
    The System.String.Contains method returns a **boolean** value which tells you if the
    string you were searching for was found. A **boolean** stores either a `true` or a
    `false` value. You'll learn more about **boolean** values
    in a later lesson.
    ***Challenge***
    There are two similar methods, System.String.StartsWith and System.String.EndsWith that also search for sub-strings in a string. These find a substring at the beginning or the
    end of the string. Try to modify the previous sample to use System.String.StartsWith and
    System.String.EndsWith instead of System.String.Contains. Search for "You" or "goodbye" at the beginning of a string. Search for "hello" or "goodbye" at the end of a string.
    > [!Note]
    > Watch your punctuation when you test for the text at the end of the string. If the string
    > ends with a period, you must check for a string that ends with a period.
    > [!NOTE]
    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this?
    ```csharp
    string message = "You say goodbye, and I say hello";
    Console.WriteLine(message.StartsWith("You"));
    Console.WriteLine(message.StartsWith("goodbye"));
    Console.WriteLine(message.EndsWith("hello"));
    Console.WriteLine(message.EndsWith("goodbye"));
    ```
    > [!NOTE]
    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
    
- content: |
    You've completed the "Hello C#" tutorial.
    You can learn more about working with the `string` type in the
    [C# Programming Guide](../programming-guide/index.md) topic on [strings](../programming-guide/strings/index.md).
